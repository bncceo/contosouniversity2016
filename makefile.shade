use namespace="System"
use namespace="System.IO"
use import="Console"
use import="Help"
use import="MsBuild"

functions
	@{
		static string PROJECT_NAME = "ContosoUniversity2016";

		static string BASE_DIR = Directory.GetCurrentDirectory();
		static string SOURCE_DIR = Path.Combine(BASE_DIR, "src");
		static string TOOLS_DIR = Path.Combine(BASE_DIR, "tools");
		
		static string TEST_PROJECT_NAME = "ContosoUniversity.Tests";
		static string TEST_PROJECT_DIR = Path.Combine(SOURCE_DIR, TEST_PROJECT_NAME);

		static string CONFIGURATION = "Release";
		
		static string PROJECT_FILE = Path.Combine(SOURCE_DIR, PROJECT_NAME + ".sln");

		static string DEV_CONNECTION_STRING_NAME = string.Join(".", PROJECT_NAME, "ConnectionString");
		static string TEST_CONNECTION_STRING_NAME = string.Join(".", PROJECT_NAME + ".Tests", "ConnectionString");
		static string DEV_CONNECTION_STRING = Environment.GetEnvironmentVariable(DEV_CONNECTION_STRING_NAME) ?? 
												"Server=localhost;Database=ContosoUniversity2016;Trusted_Connection=True;MultipleActiveResultSets=true";
		static string TEST_CONNECTION_STRING = Environment.GetEnvironmentVariable(TEST_CONNECTION_STRING_NAME) ?? 
												"Server=localhost;Database=ContosoUniversity2016.Tests;Trusted_Connection=True;MultipleActiveResultSets=true";
	}

#default .clean .restore .build .rdb .rat description="(default)|Comprehensive Building|Intended for first build or when you want a fresh, clean local copy"
	@{
	}

#dev .clean .restore .build .udb .rat description="Comprehensive Building|Optimized for local dev; Most noteably UPDATES databases instead of REBUILDING"
	@{
	}

#clean description="Building|Remove artifacts of a previous build"
	@{
		WriteLine("Executing clean", ConsoleColor.Cyan);

		// clear the artifacts folder from prior builds or this one may fail when doing a 'dnu restore'
		var artifactsDir = Path.Combine(SOURCE_DIR, "artifacts");

		if (Directory.Exists(artifactsDir))
		{
			Directory.Delete(artifactsDir, true);
		}

		var extra = "/t:clean /v:q";

		ExecuteMsBuild(PROJECT_FILE, CONFIGURATION, extra);
	}

#restore description="Building|Restore packages for the project"
	@{
		WriteLine("Executing restore", ConsoleColor.Cyan);
		Exec("cmd", "/C dnu restore");
	}

#build description="Building|Build the project"
	@{
		WriteLine("Executing build", ConsoleColor.Cyan);

		var extra = "/t:build /v:q";

		ExecuteMsBuild(PROJECT_FILE, CONFIGURATION, extra);
	}

#udb description="Database Maintenance|Update the Database to the latest version (leave db up to date with migration scripts)"
	@{
		WriteLine("Executing udb", ConsoleColor.Cyan);

		Roundhouse(DEV_CONNECTION_STRING, "DEV", "--transaction");
		Roundhouse(TEST_CONNECTION_STRING, "TEST", "--transaction");
	}

#rdb description="Database Maintenance|Rebuild database to the latest version from scratch (useful while working on the schema)"
	@{
		WriteLine("Executing rdb", ConsoleColor.Cyan);

		Roundhouse(DEV_CONNECTION_STRING, "DEV", "--drop");
		Roundhouse(DEV_CONNECTION_STRING, "DEV", "--transaction");

		Roundhouse(TEST_CONNECTION_STRING, "TEST", "--drop");
		Roundhouse(TEST_CONNECTION_STRING, "TEST", "--transaction");
	}

#rat description="Running Tests|Run all tests"
	@{
		WriteLine("Executing rat", ConsoleColor.Cyan);

		var commandline = string.Format("/C dnx -p {0} test", TEST_PROJECT_DIR);

		Exec("cmd", commandline);
	}

#help description="Help|Displays a list of build commands"
	@{
		WriteLine("Executing help", ConsoleColor.Cyan);
		WriteHelp();
	}	

macro name='Roundhouse' connectionString='string' environment='string' options='string'
   roundhouse

@{
	// global actions here - will always be performed before first task
	// unfortunately, we can't get the arguments that were used in the call
	// to check and fail gracefully if the target does not exist
}
